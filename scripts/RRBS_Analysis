# Set working directory to the project folder
# NOTE: Update this path to your local project directory for reproducibility
setwd("path_to_your_project_directory")

# Load required packages
library(methylKit)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(GenomicRanges) # For gene annotation

# Load sample metadata
# NOTE: Replace "sampleInfo.csv" with your metadata file
sampleInfo <- read.csv("sampleInfo.csv")

# Define directory containing methylation files
directory <- "methratio_by_sample/" # Update if needed

# List all methylation files and extract sample IDs
file.list <- as.list(file.path(directory, list.files(directory)))
samples <- gsub("_methratio.txt", "", list.files(directory))

# Filter metadata to include only samples with data
sampleInfo <- filter(sampleInfo, SampleID %in% samples)
print(sampleInfo)

# Read methylation data
myobj <- methRead(file.list,
                  pipeline = list(fraction = TRUE, chr.col = 1, start.col = 2, end.col = 2,
                                 coverage.col = 6, strand.col = 3, freqC.col = 5),
                  sample.id = as.list(samples),
                  assembly = "bTaeGut1.4.pri",
                  treatment = sampleInfo$condition,
                  context = "CpG")

# Add sex information as a covariate
myobj <- reorganize(myobj, 
                    sample.ids = sampleInfo$SampleID,
                    treatment = sampleInfo$condition,
                    covariates = data.frame(sex = sampleInfo$sex))

# Plot methylation statistics for all samples
for (i in 1:length(myobj)) {
  getMethylationStats(myobj[[i]], plot = TRUE, both.strands = FALSE)
}

# Filter by coverage
filtered.myobj <- filterByCoverage(myobj, lo.count = 10, lo.perc = NULL,
                                   hi.count = NULL, hi.perc = 98)

# Plot coverage statistics for filtered samples
for (i in 1:length(filtered.myobj)) {
  getCoverageStats(filtered.myobj[[i]], plot = TRUE, both.strands = FALSE)
}

# Merge samples for differential analysis
meth <- unite(filtered.myobj, destrand = FALSE, min.per.group = 15L)

# Calculate differential methylation, including sex as a covariate
myDiff <- calculateDiffMeth(meth,
                            covariates = data.frame(sex = sampleInfo$sex),
                            overdispersion = "MN",
                            adjust = "BH")

# Extract significantly differentially methylated CpGs (q-value < 0.05, difference > 25%)
myDiff25p <- getMethylDiff(myDiff, qvalue = 0.05, difference = 25)
write.csv(myDiff25p, file = "all_myDiff25p.csv")

# Analyze treatment effect for males only
males <- reorganize(filtered.myobj,
                    sample.ids = sampleInfo$SampleID[sampleInfo$sex == "M"],
                    treatment = sampleInfo$condition[sampleInfo$sex == "M"])
meth_males <- unite(males, destrand = FALSE)
myDiff_males <- calculateDiffMeth(meth_males)
myDiff25p_males <- getMethylDiff(myDiff_males, qvalue = 0.05, difference = 25)
write.csv(myDiff25p_males, file = "myDiff25p_males.csv")

# Analyze treatment effect for females only
females <- reorganize(filtered.myobj,
                      sample.ids = sampleInfo$SampleID[sampleInfo$sex == "F"],
                      treatment = sampleInfo$condition[sampleInfo$sex == "F"])
meth_females <- unite(females, destrand = FALSE)
myDiff_females <- calculateDiffMeth(meth_females)
myDiff25p_females <- getMethylDiff(myDiff_females, qvalue = 0.05, difference = 25)
write.csv(myDiff25p_females, file = "myDiff25p_females.csv")

# Print summary of results
print(paste("Total differentially methylated CpGs:", nrow(myDiff25p)))
print(paste("Differentially methylated CpGs in males:", nrow(myDiff25p_males)))
print(paste("Differentially methylated CpGs in females:", nrow(myDiff25p_females)))

# Compare results between sexes
common_CpGs <- intersect(myDiff25p_males$chr, myDiff25p_females$chr)
print(paste("CpGs differentially methylated in both sexes:", length(common_CpGs)))

# Load gene coordinates and differentially methylated data
all_25_diff_meth <- read.csv("all_myDiff25p.csv")
male_25_diff_meth <- read.csv("myDiff25p_males.csv")
female_25_diff_meth <- read.csv("myDiff25p_females.csv")
all_gene_coord <- read.csv("zebra_finch_all_gene_coordinates.csv")

# Convert gene coordinates to GRanges object
gene_ranges <- GRanges(
  seqnames = all_gene_coord$chr,
  ranges = IRanges(start = all_gene_coord$start, end = all_gene_coord$end),
  gene = all_gene_coord$gene
)

# Function to annotate CpGs with gene names
add_gene_column <- function(df) {
  df_ranges <- GRanges(
    seqnames = df$chr,
    ranges = IRanges(start = df$start, end = df$end)
  )
  overlaps <- findOverlaps(df_ranges, gene_ranges)
  df$gene <- NA
  df$gene[queryHits(overlaps)] <- gene_ranges$gene[subjectHits(overlaps)]
  return(df)
}

# Annotate differentially methylated CpGs
male_25_diff_meth <- add_gene_column(male_25_diff_meth)
female_25_diff_meth <- add_gene_column(female_25_diff_meth)
all_25_diff_meth <- add_gene_column(all_25_diff_meth)

# Save annotated results for manual review
write.csv(male_25_diff_meth, file = "annotated_myDiff25p_males.csv", row.names = FALSE)
write.csv(female_25_diff_meth, file = "annotated_myDiff25p_females.csv", row.names = FALSE)
write.csv(all_25_diff_meth, file = "annotated_myDiff25p_all.csv", row.names = FALSE)

# Create a combined factor for interaction analysis
sampleInfo$sex_treatment_interaction <- interaction(sampleInfo$sex, sampleInfo$condition)
print(sampleInfo$sex_treatment_interaction)

# Read methylation data with the new factor as treatment
myobj_interaction <- methRead(file.list,
                              pipeline = list(fraction = TRUE, chr.col = 1, start.col = 2, end.col = 2,
                                             coverage.col = 6, strand.col = 3, freqC.col = 5),
                              sample.id = as.list(samples),
                              assembly = "bTaeGut1.4.pri",
                              treatment = sampleInfo$sex_treatment_interaction,
                              context = "CpG")

# Reorganize and filter by coverage
myobj_interaction <- reorganize(myobj_interaction, 
                               sample.ids = sampleInfo$SampleID,
                               treatment = sampleInfo$sex_treatment_interaction)
filtered_myobj_interaction <- filterByCoverage(myobj_interaction, lo.count = 10, lo.perc = NULL,
                                               hi.count = NULL, hi.perc = 98)

# Check group sizes and set minimum per group for merging
print(table(sampleInfo$sex_treatment_interaction))
min_per_group <- 5L # Adjust based on your smallest group size
print(paste("Setting min.per.group to:", min_per_group))

# Merge and analyze
meth_interaction <- unite(filtered_myobj_interaction, destrand = FALSE, min.per.group = min_per_group)
myDiff_interaction <- calculateDiffMeth(meth_interaction,
                                       overdispersion = "MN",
                                       adjust = "BH")

# Extract significant results
myDiff25p_interaction <- getMethylDiff(myDiff_interaction, qvalue = 0.05, difference = 25)
write.csv(myDiff25p_interaction, file = "all_myDiff25p_sex_treatment_interaction.csv")
print(paste("Total differentially methylated CpGs (interaction analysis):", nrow(myDiff25p_interaction)))

# Pairwise comparisons
pairwise_comparisons <- calculateDiffMeth(meth_interaction, 
                                         overdispersion = "MN", 
                                         adjust = "BH", 
                                         groups = c("F.0", "M.0", "F.1", "M.1"))
saveRDS(pairwise_comparisons, file = "pairwise_comparisons_interaction.rds")

# Extract and save pairwise results
significant_cpgs <- getMethylDiff(pairwise_comparisons, qvalue = 0.05, difference = 25, type = "all")
treatment_levels <- levels(pairwise_comparisons@treatment)
for (i in 1:(length(treatment_levels) - 1)) {
  for (j in (i + 1):length(treatment_levels)) {
    comparison_name <- paste(treatment_levels[i], "vs", treatment_levels[j])
    comparison_results <- getMethylDiff(pairwise_comparisons, 
                                       qvalue = 0.05, 
                                       difference = 25, 
                                       type = "all",
                                       treatment = treatment_levels[i],
                                       treatment2 = treatment_levels[j])
    print(paste(comparison_name, ":", nrow(comparison_results), "differentially methylated CpGs"))
    write.csv(comparison_results, 
              file = paste0("diff_meth_", comparison_name, ".csv"), 
              row.names = FALSE)
  }
}

# Annotate interaction results
int_xtreatment_25_diff_meth <- add_gene_column(significant_cpgs)
gene_list <- int_xtreatment_25_diff_meth$gene
gene_list_cleaned <- gene_list[!is.na(gene_list) & gene_list != ""]
df_genes_cleaned <- data.frame(gene = gene_list_cleaned)
write.csv(df_genes_cleaned, file = "interaction_methylation_genes_cleaned.csv", row.names = FALSE)
print(paste("Number of genes after removing NA and empty entries:", nrow(df_genes_cleaned)))

# Example: Load and analyze specific methylation files
file_names <- c("NR3C1_exon1_17302155.txt", "NR3C1_exon2_17299808.txt", ...) # Add all your files
data_frames <- list()
for (file in file_names) {
  df_name <- tools::file_path_sans_ext(file)
  data_frames[[df_name]] <- read.table(file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
  cat("Created data frame:", df_name, "\n")
}
print(names(data_frames))

# Load packages for visualization
library(ggsci)
library(ggpubr)

# Function to create boxplots
plot_methylation_boxplot <- function(data, df_name) {
  p <- data %>%
    ggplot(aes(x = Condition, y = ratio, color = Sex)) +
    geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.75)) +
    geom_jitter(aes(shape = Sex), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75), size = 1) +
    scale_color_npg() +
    scale_y_continuous(limits = c(0, 1)) +
    labs(title = paste("Fraction Methylation for", df_name),
         x = "Condition",
         y = "Fraction Methylation") +
    theme_minimal() +
    theme(legend.position = "right",
          plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
    stat_compare_means(aes(group = Sex), 
                       label = "p.signif", 
                       method = "t.test", 
                       label.y = 1.05,
                       vjust = -0.2)
  print(p)
}

# Create boxplots for all dataframes
for (df_name in names(data_frames)) {
  plot_methylation_boxplot(data_frames[[df_name]], df_name)
}

# Install and load required packages
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install(c("goseq", "geneLenDataBase", "org.Gg.eg.db"))

library(goseq)
library(geneLenDataBase)
library(org.Gg.eg.db)

# Load gene universe (replace with your file)
gene_universe <- read.csv("full_condition_RRBS_diff_meth_GOSEQ_intermediate_step.csv")
colnames(gene_universe) <- c('Gene', 'Read_length', 'DE')
read_length <- as.numeric(gene_universe$Read_length)
DEgenes <- as.logical(gene_universe$DE)
names(DEgenes) <- gene_universe$Gene

# Calculate probability weighting function
pwf <- nullp(DEgenes, "hg38", "geneSymbol", bias.data = read_length)

# Perform GO enrichment
GO.wall <- goseq(pwf, "hg38", "geneSymbol")
enriched.GO.wall <- GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]

# Visualize top enriched GO terms
significant_terms <- GO.wall[GO.wall$over_represented_pvalue < 0.003, ]
significant_terms$log_pvalue <- -log10(significant_terms$over_represented_pvalue)
top_20_terms <- significant_terms[order(-significant_terms$log_pvalue), ][1:20, ]
top_20_terms$term <- factor(top_20_terms$term, levels = top_20_terms$term[order(top_20_terms$log_pvalue)])

ggplot(top_20_terms, aes(x = log_pvalue, y = term, fill = numDEInCat)) +
  geom_bar(stat = "identity", color = "blue", width = 1) +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Top 20 Significantly Enriched GO Terms",
       x = "-log10(P-value)",
       y = "GO Term",
       fill = "Number of Genes") +
  theme_minimal() +
  geom_vline(xintercept = -log10(0.01), linetype = "dotted", color = "red") +
  annotate("text", x = -log10(0.01), y = Inf, label = "p-value = 0.01", vjust = 1.5, hjust = -0.2, color = "red") +
  theme(axis.text.y = element_text(size = 8))
